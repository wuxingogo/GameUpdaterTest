// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using UnityEngine;
using UnityEditor;
using System.IO;
using System.Collections.Generic;
using System;
using LitJson;
using wuxingogo.Tools;

namespace wuxingogo.bundle
{
    public class XBundleManagerWin : XBaseWindow
    {

        [MenuItem( "Window/BundleManager Window" )]
        static void Initialization()
        {
            InitWindow<XBundleManagerWin>();
        }

        bool isPackageInApp = false;
        BuildTarget buildTarget = BuildTarget.Android;
        List<BundleInfo> bundles = new List<BundleInfo>();

        private VersionConfig currVersion = null;

        public string BuildPath
        {
            get
            {
                return "AssetBundles/" + buildTarget + "/" + BundleConfig.bundleRelativePath;
            }
        }

        public string ResourcesPath
        {
            get
            {
                return BundleConfig.resourcesPath + "/" + BundleConfig.bundleRelativePath;
            }
        }

        public override void OnXGUI()
        {
            DoButton( "BundleManager Window", () =>
            {
                var window = InitWindow<XBundleBrowserWin>();
                window.position = this.position;
                this.Close();
            } );


            BeginHorizontal();
            CreateLabel( "Version Name" );
            BundleConfig.versionFileName = CreateStringField( BundleConfig.versionFileName );
            EndHorizontal();
            BeginHorizontal();
            CreateLabel( "Encrypt Key" );
            BundleConfig.password = CreateStringField( BundleConfig.password );
            EndHorizontal();

            BeginHorizontal();
            CreateLabel( "Package In App" );
            isPackageInApp = CreateCheckBox( isPackageInApp );
            EndHorizontal();

            BeginHorizontal();
            CreateLabel( "Target Platform" );
            buildTarget = ( BuildTarget )CreateEnumSelectable( buildTarget );
            EndHorizontal();

            if( CreateSpaceButton( "Create New Version" ) )
                CreateNewVersion();

            DoButton<string>( "Open BuildPath", ReviewInFinder, ( isPackageInApp ? ResourcesPath : BuildPath ) );

            DoButton<string>( "Open TemporyPath", ReviewInFinder, Application.temporaryCachePath );
        }

        void ReviewInFinder( string path )
        {
            EditorUtility.RevealInFinder( path );
        }

        void CreateNewVersion()
        {
            if( !Directory.Exists( BundleConfig.bundlePoolRelativePath + "/" + buildTarget ) )
            {
                Directory.CreateDirectory( BundleConfig.bundlePoolRelativePath + "/" + buildTarget );
            }
            BuildPipeline.BuildAssetBundles( BundleConfig.bundlePoolRelativePath + "/" + buildTarget,
                BuildAssetBundleOptions.ChunkBasedCompression, buildTarget );

            GetAllBundles();
            CopyResources();
            CreateVersionFile( bundles, isPackageInApp );

            AssetDatabase.Refresh();


        }

        void GetAllBundles()
        {
            bundles.Clear();
            var allBundle = AssetDatabase.GetAllAssetBundleNames();
            foreach( var bundleName in allBundle )
            {

                BundleInfo bundle = new BundleInfo( bundleName );
                bundles.Add( bundle );
            }
        }

        void CopyResources()
        {
            string destPath = isPackageInApp
                ? BundleConfig.resourcesPath + "/" + BundleConfig.bundleRelativePath
                : BuildPath;
            if( Directory.Exists( destPath ) )
            {
                Directory.Delete( destPath, true );
            }
            Directory.CreateDirectory( destPath );

            


            for( int i = 0; i < bundles.Count; i++ )
            {
                EditorUtility.DisplayCancelableProgressBar( "Hold On", "Copying AssetBundle", i * 1.0f / bundles.Count );
                var bundle = bundles[i];
                var bundleName = bundle.name;
                var directoryPath = destPath;
                while( bundleName.Contains( "/" ) )
                {
                    Debug.Log( "ago bundleName : " + bundleName );
                    int index = bundleName.IndexOf( "/" ) + 1;
                    var diretoryName = bundleName.Substring( 0, index - 1 );
                    Debug.Log( "directoryName : "  + diretoryName );
                    bundleName = bundleName.Substring( index, bundleName.Length - index );
                    Debug.Log( "now bundleName : " + bundleName );
                    directoryPath += "/" + diretoryName;
                    Directory.CreateDirectory( directoryPath );
                }
                var bytes = File.ReadAllBytes( BundleConfig.bundlePoolRelativePath + "/" + buildTarget + "/" + bundle.name );
                var memory = BundleEncode.GetCompressAndEncryptLZMA( bytes, BundleConfig.password );

                bundle.size = ( uint )memory.Length;
                bundle.md5 = BundleEncode.GetFileMD5( memory );

                if( isPackageInApp )
                {
                    BundleEncode.CreateBinaryFile( destPath + "/" + bundle.name + BundleConfig.suffix, memory );
                }
                else if( !isPackageInApp && !bundle.isExist() )
                {
                    BundleEncode.CreateBinaryFile( destPath + "/" + BundleConfig.versionFileName, memory );
                }
                
            }
            EditorUtility.ClearProgressBar();
        }

        void BrowseAssetBundle()
        {

        }

        public void CreateVersionFile( List<BundleInfo> bundles, bool copyToStreamingAssets = false )
        {
            string destPath = "";
            if( copyToStreamingAssets )
                destPath = ResourcesPath + "/" + BundleConfig.versionFileName + BundleConfig.suffix;
            else
                destPath =  BuildPath + "/" + BundleConfig.versionFileName;

            VersionConfig vc = new VersionConfig();
            vc.versionNum = DateTime.Now.ToString();
            vc.bundleRelativePath = BundleConfig.bundleRelativePath;


            if( !copyToStreamingAssets )
            {
                foreach( var item in bundles )
                {
                    if( !item.isExist() )
                    {
                        vc.bundles.Add( item );
                    }
                }
            }
            else
            {
                vc.bundles = bundles;
            }
            string verJson = JsonMapper.ToJson( vc );
            
            BundleEncode.CreateBinaryFileAndHead( destPath, verJson );
            // Diff version file
            //BundleManager.GetInstance ().UpdateLocalVersionConfig (vc, destPath + "/" + BundleConfig.versionFileName + BundleConfig.suffix);
        }

    }
}